// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `cart.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.mycat.eshop.intf.model;

public class CartRecord implements java.lang.Cloneable,
                                   java.io.Serializable
{
    public int productId;

    public String productName;

    public String username;

    public long time;

    public int count;

    public long productPrice;

    public CartRecord()
    {
        this.productName = "";
        this.username = "";
    }

    public CartRecord(int productId, String productName, String username, long time, int count, long productPrice)
    {
        this.productId = productId;
        this.productName = productName;
        this.username = username;
        this.time = time;
        this.count = count;
        this.productPrice = productPrice;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        CartRecord r = null;
        if(rhs instanceof CartRecord)
        {
            r = (CartRecord)rhs;
        }

        if(r != null)
        {
            if(this.productId != r.productId)
            {
                return false;
            }
            if(this.productName != r.productName)
            {
                if(this.productName == null || r.productName == null || !this.productName.equals(r.productName))
                {
                    return false;
                }
            }
            if(this.username != r.username)
            {
                if(this.username == null || r.username == null || !this.username.equals(r.username))
                {
                    return false;
                }
            }
            if(this.time != r.time)
            {
                return false;
            }
            if(this.count != r.count)
            {
                return false;
            }
            if(this.productPrice != r.productPrice)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::intf::model::CartRecord");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, productId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, productName);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, username);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, time);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, count);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, productPrice);
        return h_;
    }

    public CartRecord clone()
    {
        CartRecord c = null;
        try
        {
            c = (CartRecord)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeInt(this.productId);
        ostr.writeString(this.productName);
        ostr.writeString(this.username);
        ostr.writeLong(this.time);
        ostr.writeInt(this.count);
        ostr.writeLong(this.productPrice);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.productId = istr.readInt();
        this.productName = istr.readString();
        this.username = istr.readString();
        this.time = istr.readLong();
        this.count = istr.readInt();
        this.productPrice = istr.readLong();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, CartRecord v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public CartRecord ice_read(com.zeroc.Ice.InputStream istr)
    {
        CartRecord v = new CartRecord();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<CartRecord> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, CartRecord v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<CartRecord> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(CartRecord.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final CartRecord _nullMarshalValue = new CartRecord();

    public static final long serialVersionUID = -1579561164L;
}
